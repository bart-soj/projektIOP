package com.example.interestapp

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

class MainActivity : AppCompatActivity() {
    private lateinit var advertiser: BLEAdvertiser
    private lateinit var scanner: BLEScanner

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setTheme(R.style.Theme_InterestApp)

        setContentView(R.layout.activity_main)

        advertiser = BLEAdvertiser()
        scanner = BLEScanner(this)

        val startAdvertising: Button = findViewById(R.id.start_advertising)
        val startScanning: Button = findViewById(R.id.start_scanning)
        val stopAdvertising: Button = findViewById(R.id.stop_advertising)
        val stopScanning: Button = findViewById(R.id.stop_scanning)

        statusTextView = findViewById(R.id.status_text)

        requestPermissions()

        startAdvertising.setOnClickListener {
            updateStatus("Nadawanie BLE rozpoczęte...")
            val serviceIntent = Intent(this, BLEForegroundService::class.java)
            serviceIntent.action = "START_ADVERTISING"
            startService(serviceIntent)
        }

        stopAdvertising.setOnClickListener {
            updateStatus("Nadawanie BLE zatrzymane")
            val serviceIntent = Intent(this, BLEForegroundService::class.java)
            serviceIntent.action = "STOP_ADVERTISING"
            startService(serviceIntent)
        }

        startScanning.setOnClickListener {
            try {
                if (hasPermission(Manifest.permission.BLUETOOTH_SCAN)) {
                    val serviceIntent = Intent(this, BLEForegroundService::class.java)
                    serviceIntent.action = BLEForegroundService.ACTION_START
                    startService(serviceIntent)
                    showToast("Rozpoczęto skanowanie BLE w tle")
                    updateStatus("Skanowanie BLE rozpoczęte...")
                } else {
                    showToast("Brak uprawnień do skanowania BLE!")
                }
            } catch (e: SecurityException) {
                showToast("Błąd: Brak uprawnień do BLE Scan!")
            }
        }

        stopScanning.setOnClickListener {
            val serviceIntent = Intent(this, BLEForegroundService::class.java)
            serviceIntent.action = BLEForegroundService.ACTION_STOP
            startService(serviceIntent)
            showToast("Zatrzymano skanowanie BLE")
            updateStatus("Skanowanie BLE zatrzymane")
        }
    }

    /** Sprawdza, czy uprawnienie jest przyznane */
    private fun hasPermission(permission: String): Boolean {
        return ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED
    }

    /** Poproś użytkownika o wymagane uprawnienia */
    private fun requestPermissions() {
        val permissions = mutableListOf(
            Manifest.permission.BLUETOOTH_SCAN,
            Manifest.permission.BLUETOOTH_ADVERTISE,
            Manifest.permission.BLUETOOTH_CONNECT
        )

        // Android 12+ (API 31) wymaga Foreground Service i Lokalizacji
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            permissions.add(Manifest.permission.FOREGROUND_SERVICE_LOCATION)
            permissions.add(Manifest.permission.ACCESS_FINE_LOCATION)
            permissions.add(Manifest.permission.ACCESS_COARSE_LOCATION)
        }

        // Android 13+ (API 33) wymaga powiadomień
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            permissions.add(Manifest.permission.POST_NOTIFICATIONS)
        }

        ActivityCompat.requestPermissions(this, permissions.toTypedArray(), 1)
    }

    /** Obsługa odpowiedzi na prośbę o uprawnienia */
    private val requestPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissions ->
            val granted = permissions.entries.all { it.value }
            if (granted) {
                showToast("Wszystkie wymagane uprawnienia przyznane!")
            } else {
                showToast("Niektóre uprawnienia zostały odrzucone. BLE może nie działać poprawnie.")
            }
        }

    /** Szybka funkcja do wyświetlania powiadomień */
    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }

    private lateinit var statusTextView: TextView

    private fun updateStatus(status: String) {
        runOnUiThread {
            statusTextView.text = "Status: $status"
        }
    }
}
